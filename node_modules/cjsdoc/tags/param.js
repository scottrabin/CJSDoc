/**
 * Handles @param tags. These tags look like: @param [{type}] [varName="defaultValue"] [desc]
 */

var PARAM_TYPE = /^\{([^@}]*)\}\s*/;
var PARAM_OPTIONAL_VALUE = /^\[([^\]]+)\]\s*/;
var PARAM_FIRST_TOKEN = /^(\S+)\s*/;

exports.handle = function( doc, root ){
    if( !doc.param ){ return; }

    var param, name, type, desc, optional, defValue, match, str;
    for( var i = 0, l = doc.param.length ; i < l ; ++i ){
	// reset everything
	param = name = type = desc = optional = defValue = null;
	str = doc.param[i];
	// try to find a type
	if( ( match = str.match( PARAM_TYPE ) ) !== null ){
	    type = getType( match[1] );
	    // strip out the type info
	    str = str.replace( PARAM_TYPE, '' );
	}
	// try to find an optional value
	if( ( match = str.match( PARAM_OPTIONAL_VALUE ) ) !== null ){
	    optional = true;
	    name = match[1].split( '=' );

	    defValue = name.slice(1).join( '=' ) || null;
	    name = name[0];

	    // if it's in the optional []'s, it MUST be named properly
	    if( !getParamByName( doc.parent.params, name ) )
		throw new Error( "Invalid @param: parameter name " + name + " not found in parameter list");

	    str = str.replace( PARAM_OPTIONAL_VALUE, '' );
	}
	// look at the first word of the remainder to see if it is a variable name
	if( !name && ( match = str.match( PARAM_FIRST_TOKEN ) ) !== null ){
	    if( null !== getParamByName( doc.parent.params, match[1] ) ){
		name = match[1];
	    } else if( '...' === match[1] ){
		name = "<arguments>";
	    }
	    if( name )
		str = str.replace( PARAM_FIRST_TOKEN, '' );
	}

	if( !name ){ name = doc.parent.params[i]; }

	doc.param[i] = {};

	if( name )
	    doc.param[i].name = name;

	doc.param[i].type = type || '*';

	// if this parameter is optional, set it
	if( optional )
	    doc.param[i].optional = !!optional;

	// if there's a default value, set it
	if( null !== defValue )
	    doc.param[i].defaultValue = defValue;

	// if any part of the string remains, it's the description
	if( str.length > 0 )
	    doc.param[i].description = str;
    }
};

function getParamByName( params, name ){
    for( var i = 0, l = params.length ; i < l ; ++i )
	if( params[i] === name )
	    return params[i];
    return null;
}

function getType( typeStr ){
    typeStr = typeStr.split( '|' );
    for( var i = 0, l = typeStr.length ; i < l ; ++i )
	typeStr[i] = typeStr[i].replace( /^\s\s*/, '' ).replace( /\s+$/, '' );
    return ( typeStr.length === 1 ? typeStr[0] : typeStr );
}