/**
 * Translates the Narcissus output into a walkable AST with appropriate documentation.
 * @module cjsdoc
 * @author Scott Rabin
 * @version 0.0.1
 */

var Narcissus = require( 'narcissus' );

// create a node.type => token_name mapping
var tokenIds = Narcissus.definitions.tokenIds, typeMap = [];
for( var x in tokenIds ){
    if( tokenIds.hasOwnProperty(x) ){
	typeMap[ tokenIds[x] ] = x;
    }
}

exports.parse = function( src, filename ){
    // get the AST from Narcissus before traversing
    var rootNode = Narcissus.parser.parse( src, filename );

    //    var tree = copy_node( ast );
    var tree = walk_ast( rootNode );

    return tree;
};

function walk_ast( node, root ){

    // create the new leaf
    var leaf = new Tree( node );

    // if no root specified, this node is the root node
    if( !root ){ root = leaf; }

    // if there is a special case handler for this leaf type
    if( exports.NODE_HANDLER[ leaf.typeName ] ){
	exports.NODE_HANDLER[ leaf.typeName ]( leaf, node, root );
    }    

    // if this node has children, walk them
    if( node.children.length > 0 )
	walk_children( leaf, node, root );
   
    // if this node has an initializer, parse it
    if( node.initializer )
	leaf.initializer = walk_ast( node.initializer );

    // if this node is part of an expression, parse it
    if( node.expression )
	leaf.expression = walk_ast( node.expression );

    // return this leaf
    return leaf;
}

function walk_children( leaf, node, root ){

    leaf.children = [];

    for( var i = 0, l = node.children.length, child ; i < l ; ++i ){
	child = walk_ast( node.children[i], root );
	if( child ){
	    leaf.children.push( child );
	}
    }
}

var DOC_COMMENT_STRIP = /^\/\*\*[\s\r\n\*]*([\s\S]*?)[\r\n\s\*]*\*\/$/;

exports.NODE_HANDLER = {
    "SCRIPT": function( leaf, node, root ){
	leaf.name = node.tokenizer.filename;
	leaf.value = node.tokenizer.source;
    },
    "FUNCTION": function( leaf, node, root ){
	leaf.params = node.params;
    },
    "DOC_COMMENT": function( leaf, node, root ){
	leaf.value = leaf.value.match( DOC_COMMENT_STRIP )[1];
    }
};

function Tree( node ){
    this.typeName = typeMap[ node.type ];
    this.value = node.value;
    this.lineno = node.lineno;
}